syntax = "proto3";

package rpc;

option go_package = "./user";

message LoginRequest {
  string Id = 1;
  string Identity = 2;
  string Name=3;
}

message LoginResponse {
  int32 code = 1;
  string msg = 2;
  string data = 3;
}

message GetUserInfoRequest{
  string userId=1;
}

message GetUserInfoResponse{
  string username=1;
  string password=2;
}
message GetUserRepositoryByUserIdentityRequest{
  string userIdentity=1;
}

message UserRepository{
  string identity = 1;
  string user_identity = 2;
  int64 parent_id = 3;
  string repository_identity = 4;
  string ext = 5;
  string name = 6;
}
message GetUserRepositoryByUserIdentityResponse{
  repeated UserRepository repositories=1;
}

message DeleteUserRepositoryByIdentityRequest{
  string identity=1;
}
message DeleteUserRepositoryByIdentityResponse{
  bool  result=1;
}
message RegisterSendCodeRequest{
  string email=1;
}
message RegisterSendCodeResponse{
  bool success=1;
  string message=2;
}
message UserRegisterRequest{
  string username=1;
  string password=2;
  string email=3;
}
message UserRegisterResponse{
  bool  result=1;
  string msg=2;
}
service UserService {
  rpc Login (LoginRequest) returns (LoginResponse);
  rpc GetUserInfo (GetUserInfoRequest) returns (GetUserInfoResponse);
  rpc GetUserRepositoryByUserIdentity (GetUserRepositoryByUserIdentityRequest) returns (GetUserRepositoryByUserIdentityResponse);
  rpc DeleteUserRepositoryByIdentity(DeleteUserRepositoryByIdentityRequest)returns (DeleteUserRepositoryByIdentityResponse);
  rpc RegisterSendCode(RegisterSendCodeRequest) returns (RegisterSendCodeResponse);
  rpc UserRegister(UserRegisterRequest) returns (UserRegisterResponse);
}

//   goctl rpc protoc user.proto --go_out=types --go-grpc_out=types --zrpc_out=.