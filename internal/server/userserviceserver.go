// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package server

import (
	"context"

	"blog/rpc/internal/logic"
	"blog/rpc/internal/svc"
	"blog/rpc/types/user"
)

type UserServiceServer struct {
	svcCtx *svc.ServiceContext
	user.UnimplementedUserServiceServer
}

func NewUserServiceServer(svcCtx *svc.ServiceContext) *UserServiceServer {
	return &UserServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServiceServer) Login(ctx context.Context, in *user.LoginRequest) (*user.LoginResponse, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServiceServer) GetUserInfo(ctx context.Context, in *user.GetUserInfoRequest) (*user.GetUserInfoResponse, error) {
	l := logic.NewGetUserInfoLogic(ctx, s.svcCtx)
	return l.GetUserInfo(in)
}

func (s *UserServiceServer) GetUserRepositoryByUserIdentity(ctx context.Context, in *user.GetUserRepositoryByUserIdentityRequest) (*user.GetUserRepositoryByUserIdentityResponse, error) {
	l := logic.NewGetUserRepositoryByUserIdentityLogic(ctx, s.svcCtx)
	return l.GetUserRepositoryByUserIdentity(in)
}

func (s *UserServiceServer) DeleteUserRepositoryByIdentity(ctx context.Context, in *user.DeleteUserRepositoryByIdentityRequest) (*user.DeleteUserRepositoryByIdentityResponse, error) {
	l := logic.NewDeleteUserRepositoryByIdentityLogic(ctx, s.svcCtx)
	return l.DeleteUserRepositoryByIdentity(in)
}

func (s *UserServiceServer) RegisterSendCode(ctx context.Context, in *user.RegisterSendCodeRequest) (*user.RegisterSendCodeResponse, error) {
	l := logic.NewRegisterSendCodeLogic(ctx, s.svcCtx)
	return l.RegisterSendCode(in)
}

func (s *UserServiceServer) UserRegister(ctx context.Context, in *user.UserRegisterRequest) (*user.UserRegisterResponse, error) {
	l := logic.NewUserRegisterLogic(ctx, s.svcCtx)
	return l.UserRegister(in)
}

func (s *UserServiceServer) KafkaSendTestcase(ctx context.Context, in *user.KafkaSendTestcaseRequest) (*user.KafkaSendTestcaseResponse, error) {
	l := logic.NewKafkaSendTestcaseLogic(ctx, s.svcCtx)
	return l.KafkaSendTestcase(in)
}

func (s *UserServiceServer) KafkaReceiveTestcase(ctx context.Context, in *user.Empty) (*user.KafkaReceiveTestcaseResponse, error) {
	l := logic.NewKafkaReceiveTestcaseLogic(ctx, s.svcCtx)
	return l.KafkaReceiveTestcase(in)
}

func (s *UserServiceServer) UserIsExist(ctx context.Context, in *user.UserIsExistRequest) (*user.UserIsExistResponse, error) {
	l := logic.NewUserIsExistLogic(ctx, s.svcCtx)
	return l.UserIsExist(in)
}

func (s *UserServiceServer) CreateOrder(ctx context.Context, in *user.CreateOrderRequest) (*user.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *UserServiceServer) RoomStockDeduct(ctx context.Context, in *user.RoomStockDeductRequest) (*user.RoomStockDeductResponse, error) {
	l := logic.NewRoomStockDeductLogic(ctx, s.svcCtx)
	return l.RoomStockDeduct(in)
}

func (s *UserServiceServer) GetRoomStock(ctx context.Context, in *user.GetRoomStockRequest) (*user.GetRoomStockResponse, error) {
	l := logic.NewGetRoomStockLogic(ctx, s.svcCtx)
	return l.GetRoomStock(in)
}

func (s *UserServiceServer) RoomIsExist(ctx context.Context, in *user.RoomIsExistRequest) (*user.RoomIsExistResponse, error) {
	l := logic.NewRoomIsExistLogic(ctx, s.svcCtx)
	return l.RoomIsExist(in)
}

func (s *UserServiceServer) FollowUser(ctx context.Context, in *user.FollowUserRequest) (*user.FollowUserResponse, error) {
	l := logic.NewFollowUserLogic(ctx, s.svcCtx)
	return l.FollowUser(in)
}
